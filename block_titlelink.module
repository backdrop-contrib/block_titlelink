<?php
/**
 * @file 
 * Module for adding a link to a block title.
*/

/**
 * Implementation of hook_permission
 */
function block_titlelink_permission() {
  return array(
    'set block title links' => array(
      'title' => t('Set block title links'),
      'description' => t('Set optional links for block titles'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function block_titlelink_form_layout_block_configure_form_alter(&$form, &$form_state) {
  if (user_access('set block title links')) {
    // Add the titlelink form.
    block_titlelink_form($form, $form_state);
    // Call our submit handler before layout's.
    array_unshift($form['#submit'], 'block_titlelink_form_submit');
  }
}

/**
 * Form elements.
 */
function block_titlelink_form(&$form, &$form_state) {
  $settings = array();
  if (isset($form_state['block']->settings['block_titlelink'])) {
    $settings = $form_state['block']->settings['block_titlelink'];
  }

  $path = (isset($settings['path'])) ? $settings['path'] : NULL;
  $title = (isset($settings['title'])) ? $settings['title'] : NULL;
  $target = (isset($settings['target'])) ? $settings['target'] : NULL;
  $display_link = (isset($settings['display'])) ? $settings['display'] : TRUE;

  // Define Titlelink form elements
  $form['block_titlelink'] = array(
    '#type' => 'fieldset',
    '#title' => t('Block title link settings'),
    '#collapsible' => TRUE,
    '#collapsed' => !empty($path) ? FALSE : TRUE,
    '#weight' => 10,
    '#tree' => TRUE,
  );
  $form['block_titlelink']['title_link'] = array(
    '#type' => 'textfield',
    '#title' => t('Link destination'),
    '#default_value' => $path,
    '#description' => t('Tokens are supported. When left blank, all block title link settings will be removed.'),
    '#maxlength' => '255',
  );
  $targets = array(
    '_blank' => '_blank: ' . t('Opens in a new window or tab.'), 
    '_parent' => '_parent: ' . t('Opens in the parent frame.'), 
    '_top' => '_top: ' . t('Opens in the full body of the window.'),
    '_self' => '_self: ' . t('Opens in the same frame (this is the default behavior).'), 
  );
  $form['block_titlelink']['title_link_target'] = array(
    '#type' => 'select',
    '#title' => t('Link target attribute'),
    '#options' => $targets,
    '#empty_value' => '',
    '#default_value' => $target,
  );
  $form['block_titlelink']['title_link_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Link title attribute'),
    '#description' => t('The &lt;a title="" &gt; attribute can clarify or further describe the purpose of a link. Appears only on hover.'),
    '#default_value' => $title,
  );
  $form['block_titlelink']['display_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Render the block title as a link'),
    '#description' => t('When unchcked, the title will not be linked, but link settings will be available in the block template. This can be used to place the link elsewhere in the block.'),
    '#default_value' => $display_link,
  );
  // Provide Token Help
  $form['block_titlelink']['token_help'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('user'),
  );

  $form['#validate'][] = 'block_titlelink_form_validate';
}

/**
 * Validate handler.
 */
function block_titlelink_form_validate(&$form, &$form_state) {
  $title_link = trim($form_state['values']['block_titlelink']['title_link']);
  if (!empty($title_link) && !link_validate_url($title_link)) {
    form_error($elements['settings']['block_titlelink']['title_link'], t('The link destination contains an invalid URL.'));
  }
}

/**
 * Submit handler.
 */
function block_titlelink_form_submit(&$form, &$form_state) {
  $settings = array();
  $path = trim($form_state['values']['block_titlelink']['title_link']);
  if (!empty($path)) {
    $settings['path'] = $path;
    $settings['title'] = $form_state['values']['block_titlelink']['title_link_title'];
    $settings['target'] = $form_state['values']['block_titlelink']['title_link_target'];
    $settings['display'] = $form_state['values']['block_titlelink']['display_link'];
  }

  $form_state['block']->settings['block_titlelink'] = $settings;
}

/**
 * Implements hook_preprocess_block().
 */
function block_titlelink_preprocess_block(&$variables) {
  if (isset($variables['block']->settings['block_titlelink'])) {

    $data = $variables['block']->settings['block_titlelink'];

    $variables['block']->title_link = (isset($data['path'])) ? trim($data['path']) : NULL;
    $variables['block']->title_link_title = (isset($data['title'])) ? check_plain($data['title']) : NULL;
    $variables['block']->title_link_target = (isset($data['target'])) ? $data['target'] : NULL;
    // Add Tokens
    if (function_exists('token_replace')) {
      global $user;
      $token_params = array(
        'user' => $user,
      );
      $variables['block']->title_link = token_replace($variables['block']->title_link, $token_params);
      $variables['block']->title_link_title = token_replace($variables['block']->title_link_title, $token_params);
    }

    $display = (isset($data['display'])) ? $data['display'] : TRUE;
    if (!empty($variables['title']) && !empty($variables['block']->title_link) && $display) {
      $attributes = array(
        'attributes' => array(
          'class' => array('block-title-link'),
        ),
        'html' => TRUE,
      );
      if(!empty($variables['block']->title_link_title)) {
        $attributes['attributes']['title'] = $variables['block']->title_link_title;
      }
      if(!empty($variables['block']->title_link_target)) {
        $attributes['attributes']['target'] = $variables['block']->title_link_target;
      }

      // Allow Drupal to parse the URL and provide us with a keyed array
      // that we can hand off to l()
      $parsed_url = backdrop_parse_url($variables['block']->title_link);

      // Add in the query string if one exists.
      if (!empty($parsed_url['query'])) {
        $attributes['query'] = $parsed_url['query'];
      }
      // Build the fragment onto the end if it is present.
      if (!empty($parsed_url['fragment'])) {
        $attributes['fragment'] = $parsed_url['fragment'];
      }

      $variables['title'] = l(t($variables['title']), $parsed_url['path'], $attributes);
    }
  }
}
